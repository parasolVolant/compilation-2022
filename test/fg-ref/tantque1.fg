0 : ( 4 )		call	main	;
1 : ( 2 )		mov	ebx,	0	; valeur de retour du programme
2 : ( 3 )		mov	eax,	1	;
3 : ( 4 )		int 0x80	;
4 : ( 5 )	main :	push	ebp	;sauvegarde la valeur de ebp
5 : ( 6 )		mov	ebp,	esp	;nouvelle valeur de ebp
6 : ( 7 )		sub	esp,	4	;allocation des variables locales
7 : ( 8 )		mov	dword [ebp-4*1],	10	;Affect
8 : ( 9 )	l0 :	mov	r0,	1	;Affect
9 : ( 10 )		mov	r4,	0	;JumpIfLess 1
10 : ( 11 )		cmp	r4,	dword [ebp-4*1]	;on passe par un registre temporaire
11 : ( 12 13 )		jl	l2	;JumpIfLess 2
12 : ( 13 )		mov	r0,	0	;Affect
13 : ( 14 )	l2 :	cmp	r0,	0	;JumpIfEqual 1
14 : ( 15 21 )		je	l1	;JumpIfEqual 2
15 : ( 16 )		mov	eax,	dword [ebp-4*1]	;Write 1
16 : ( )		call	iprintLF	;Write 2
17 : ( 18 )		mov	r1,	dword [ebp-4*1]	;
18 : ( 19 )		sub	r1,	1	;
19 : ( 20 )		mov	dword [ebp-4*1],	r1	;Affect
20 : ( 8 )		jmp	l0	;Jump
21 : ( 22 )	l1 :	mov	eax,	0	;Write 1
22 : ( )		call	iprintLF	;Write 2
23 : ( 24 )		add	esp,	4	;d√©sallocation des variables locales
24 : ( 25 )		pop	ebp	;restaure la valeur de ebp
25 : ( )		ret	;
