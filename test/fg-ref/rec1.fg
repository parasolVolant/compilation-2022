0 : ( 28 )		call	main	;
1 : ( 2 )		mov	ebx,	0	; valeur de retour du programme
2 : ( 3 )		mov	eax,	1	;
3 : ( 4 )		int 0x80	;
4 : ( 5 )	f :	push	ebp	;sauvegarde la valeur de ebp
5 : ( 6 )		mov	ebp,	esp	;nouvelle valeur de ebp
6 : ( 7 )		sub	esp,	0	;allocation des variables locales
7 : ( 8 )		mov	r0,	1	;Affect
8 : ( 9 )		cmp	dword [ebp+4*3],	1	;JumpIfEqual 1
9 : ( 10 11 )		je	l2	;JumpIfEqual 2
10 : ( 11 )		mov	r0,	0	;Affect
11 : ( 12 )	l2 :	cmp	r0,	0	;JumpIfEqual 1
12 : ( 13 15 )		je	l0	;JumpIfEqual 2
13 : ( 14 )		mov	dword [ebp+4*2],	1	;ecriture de la valeur de retour
14 : ( 25 )		jmp	l1	;Jump
15 : ( 16 )	l0 :	mov	r2,	dword [ebp+4*3]	;
16 : ( 17 )		sub	r2,	1	;
17 : ( 18 )		push	r2	;Param
18 : ( 19 )		sub	esp,	4	;allocation mémoire pour la valeur de retour
19 : ( 4 )		call	f	;
20 : ( 21 )		pop	r1	;récupération de la valeur de retour
21 : ( 22 )		add	esp,	4	;désallocation des arguments
22 : ( 23 )		mov	r3,	1	;
23 : ( 24 )		add	r3,	r1	;
24 : ( 25 )		mov	dword [ebp+4*2],	r3	;ecriture de la valeur de retour
25 : ( 26 )	l1 :	add	esp,	0	;désallocation des variables locales
26 : ( 27 )		pop	ebp	;restaure la valeur de ebp
27 : ( 28 )		ret	;
28 : ( 29 )	main :	push	ebp	;sauvegarde la valeur de ebp
29 : ( 30 )		mov	ebp,	esp	;nouvelle valeur de ebp
30 : ( 31 )		sub	esp,	0	;allocation des variables locales
31 : ( 32 )		push	100	;Param
32 : ( 33 )		sub	esp,	4	;allocation mémoire pour la valeur de retour
33 : ( 4 )		call	f	;
34 : ( 35 )		pop	r4	;récupération de la valeur de retour
35 : ( 36 )		add	esp,	4	;désallocation des arguments
36 : ( 37 )		mov	eax,	r4	;Write 1
37 : ( )		call	iprintLF	;Write 2
38 : ( 39 )		add	esp,	0	;désallocation des variables locales
39 : ( 40 )		pop	ebp	;restaure la valeur de ebp
40 : ( )		ret	;
