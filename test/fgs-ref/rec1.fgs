iter num = 7
use = () def = ()	in = ()	 	out = ()	 		call	main	;
use = () def = (5 )	in = ()	 	out = ()	 		mov	ebx,	0	; valeur de retour du programme
use = () def = (6 )	in = ()	 	out = ()	 		mov	eax,	1	;
use = () def = ()	in = ()	 	out = ()	 		int 0x80	;
use = () def = ()	in = ()	 	out = ()	 	f :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	0	;allocation des variables locales
use = () def = (0 )	in = ()	 	out = (0 )	 		mov	r0,	1	;Affect
use = () def = ()	in = (0 )	 	out = (0 )	 		cmp	dword [ebp+4*3],	1	;JumpIfEqual 1
use = () def = ()	in = (0 )	 	out = (0 )	 		je	l2	;JumpIfEqual 2
use = () def = (0 )	in = ()	 	out = (0 )	 		mov	r0,	0	;Affect
use = (0 ) def = ()	in = (0 )	 	out = ()	 	l2 :	cmp	r0,	0	;JumpIfEqual 1
use = () def = ()	in = ()	 	out = ()	 		je	l0	;JumpIfEqual 2
use = () def = ()	in = ()	 	out = ()	 		mov	dword [ebp+4*2],	1	;ecriture de la valeur de retour
use = () def = ()	in = ()	 	out = ()	 		jmp	l1	;Jump
use = () def = (2 )	in = ()	 	out = (2 )	 	l0 :	mov	r2,	dword [ebp+4*3]	;
use = (2 ) def = (2 )	in = (2 )	 	out = (2 )	 		sub	r2,	1	;
use = (2 ) def = ()	in = (2 )	 	out = ()	 		push	r2	;Param
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	4	;allocation mémoire pour la valeur de retour
use = () def = ()	in = ()	 	out = ()	 		call	f	;
use = () def = (1 )	in = ()	 	out = (1 )	 		pop	r1	;récupération de la valeur de retour
use = () def = ()	in = (1 )	 	out = (1 )	 		add	esp,	4	;désallocation des arguments
use = () def = (3 )	in = (1 )	 	out = (1 3 )	 		mov	r3,	1	;
use = (1 3 ) def = (3 )	in = (1 3 )	 	out = (3 )	 		add	r3,	r1	;
use = (3 ) def = ()	in = (3 )	 	out = ()	 		mov	dword [ebp+4*2],	r3	;ecriture de la valeur de retour
use = () def = ()	in = ()	 	out = ()	 	l1 :	add	esp,	0	;désallocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret	;
use = () def = ()	in = ()	 	out = ()	 	main :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	0	;allocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		push	100	;Param
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	4	;allocation mémoire pour la valeur de retour
use = () def = ()	in = ()	 	out = ()	 		call	f	;
use = () def = (4 )	in = ()	 	out = (4 )	 		pop	r4	;récupération de la valeur de retour
use = () def = ()	in = (4 )	 	out = (4 )	 		add	esp,	4	;désallocation des arguments
use = (4 ) def = (7 )	in = (4 )	 	out = ()	 		mov	eax,	r4	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;désallocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret	;
