iter num = 5
use = () def = ()	in = ()	 	out = ()	 		call	main	;
use = () def = (1 )	in = ()	 	out = ()	 		mov	ebx,	0	; valeur de retour du programme
use = () def = (2 )	in = ()	 	out = ()	 		mov	eax,	1	;
use = () def = ()	in = ()	 	out = ()	 		int 0x80	;
use = () def = ()	in = ()	 	out = ()	 	f :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	0	;allocation des variables locales
use = () def = (3 )	in = ()	 	out = (3 )	 		mov	r3,	dword [ebp+4*3]	;ecriture de la valeur de retour
use = (3 ) def = ()	in = (3 )	 	out = ()	 		mov	dword [ebp+4*2],	r3	;on passe par un registre temporaire
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;désallocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret	;
use = () def = ()	in = ()	 	out = ()	 	main :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	0	;allocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		push	3712	;Param
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	4	;allocation mémoire pour la valeur de retour
use = () def = ()	in = ()	 	out = ()	 		call	f	;
use = () def = (0 )	in = ()	 	out = (0 )	 		pop	r0	;récupération de la valeur de retour
use = () def = ()	in = (0 )	 	out = (0 )	 		add	esp,	4	;désallocation des arguments
use = (0 ) def = (4 )	in = (0 )	 	out = ()	 		mov	eax,	r0	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;désallocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret	;
