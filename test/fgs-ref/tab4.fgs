iter num = 3
use = () def = ()	in = ()	 	out = ()	 		call	main	;
use = () def = (1 )	in = ()	 	out = ()	 		mov	ebx,	0	; valeur de retour du programme
use = () def = (2 )	in = ()	 	out = ()	 		mov	eax,	1	;
use = () def = ()	in = ()	 	out = ()	 		int 0x80	;
use = () def = ()	in = ()	 	out = ()	 	main :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	0	;allocation des variables locales
use = () def = (3 )	in = ()	 	out = (3 )	 		mov	r3,	0	;
use = (3 ) def = ()	in = (3 )	 	out = ()	 		mov	dword [tab+4*r3],	1	;Affect
use = () def = (5 )	in = ()	 	out = (5 )	 		mov	r5,	0	;
use = (5 ) def = (4 )	in = (5 )	 	out = (4 )	 		mov	r4,	dword [tab+4*r5]	;
use = (4 ) def = ()	in = (4 )	 	out = ()	 		mov	dword [tab+4*r4],	12	;Affect
use = () def = (6 )	in = ()	 	out = (6 )	 		mov	r6,	0	;
use = (6 ) def = (0 )	in = (6 )	 	out = (0 )	 		mov	r0,	dword [tab+4*r6]	;
use = (0 ) def = (0 )	in = (0 )	 	out = (0 )	 		add	r0,	1	;
use = (0 ) def = (7 )	in = (0 )	 	out = (7 )	 		mov	r7,	r0	;
use = (7 ) def = ()	in = (7 )	 	out = ()	 		mov	dword [tab+4*r7],	13	;Affect
use = () def = (9 )	in = ()	 	out = (9 )	 		mov	r9,	0	;
use = (9 ) def = (8 )	in = (9 )	 	out = ()	 		mov	eax,	dword [tab+4*r9]	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = (11 )	in = ()	 	out = (11 )	 		mov	r11,	1	;
use = (11 ) def = (10 )	in = (11 )	 	out = ()	 		mov	eax,	dword [tab+4*r11]	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = (13 )	in = ()	 	out = (13 )	 		mov	r13,	2	;
use = (13 ) def = (12 )	in = (13 )	 	out = ()	 		mov	eax,	dword [tab+4*r13]	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;d√©sallocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret	;
